import pandas as pd
import matplotlib.pyplot as plt
from matplotlib.patches import Patch
import numpy as np
import seaborn as sns



normalMeasures = {
    "basic_example": [7],
    "test1": [10],
    "test2": [6],
    "test3": [12],
    "test4": [9],
    "test5": [5],
    "test6": [11]
}

decTreeMeasures = {
    "basic_example": [7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
                      7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
                      7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 
                      7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 
                      6, 6, 6, 6, 6, 6, 6, 6],

    "test1": [10, 9, 8, 7, 6, 7, 6, 10, 9, 8, 
              7, 6, 7, 6, 6, 5, 5, 5, 5, 5, 
              5, 10, 9, 8, 7, 6, 7, 6, 10, 9, 
              8, 7, 6, 7, 6, 6, 5, 5, 5, 5, 
              5, 5],

    "test2": [6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 
              5, 5, 5, 5, 5, 5, 4, 4],

    "test3": [9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 
              8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
              9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 
              8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
              9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 
              8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
              9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 
              8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
              9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 
              8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
              9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 
              8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
              9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 
              8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 
              9, 9, 9, 9, 9, 9, 9, 9, 8, 8, 
              8, 8, 8, 8, 8, 8, 8, 8, 8, 8],

    "test4": [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 
              9, 9, 9, 9, 9, 9],

    "test5": [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 
              5, 5, 5, 5, 5, 5],

    "test6": [11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 
              10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 
              10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 
              10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 
              10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 
              10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 
              10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 
              10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 
              10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 
              10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 
              10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 
              10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 
              10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 
              10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 
              10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 
              10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 
              10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 10, 10, 10, 10, 10, 10, 
              10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 10, 10, 
              10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 10, 10, 10, 10, 10, 10, 10, 10, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 10, 10, 10, 10, 
              10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 
              11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 
              10, 10, 10, 10, 10, 10, 10, 10] 
}

nMean = [int(np.mean(l)*100)/100 for l in normalMeasures.values()]
dMean = [int(np.mean(l)*100)/100 for l in decTreeMeasures.values()]



m = {"no optimization" : nMean,"decision tree" : dMean}


testName = ['basic_example', 'test1', 'test2', 'test3', 'test4', 'test5', 'test6']
width = 0.45  # the width of the bars
multiplier = 0

x = np.arange(len(testName))  # the label locations


fig, ax = plt.subplots(layout='constrained')
pattern = ["///",None]
colors = ['red', 'blue', 'green', 'tab:orange', 'olive','brown','purple']
legend_element = [Patch(facecolor="white",edgecolor="black",hatch=pattern[0],label = "No optimization"),Patch(facecolor="white",edgecolor="black",label = "Decision Tree")]
for attribute, measurement in m.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute,hatch=pattern[multiplier],color = colors,edgecolor =colors,alpha = 0.5,linewidth = 1)
    ax.bar_label(rects, label_type="center")
    multiplier += 1
    








# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('# of asked questions')
ax.set_title('Number of questions asked in average')
ax.legend(handles = legend_element,loc='upper right')
ax.set_xticks(x + width/2, testName)
ax.set_ylim(0, 15)

plt.show()

plotList = []
for i in range( len(testName)):
    col = colors[i]
    if i in [4,5]:
        continue
    
    plotList.append(sns.displot(decTreeMeasures[testName[i]],color = col,element="step",alpha = 0.3))
    plotList[-1].set_xlabels("# of asked questions",fontsize = 20) 
    plotList[-1].set_ylabels("# of path in the dec. tree",fontsize = 20)
    #plotList[-1].set(title=testName[i])
    plotList[-1].tick_params(labelsize = 15)
    plt.show()